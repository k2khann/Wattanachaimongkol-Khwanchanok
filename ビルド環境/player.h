//=============================================================================
//
// モデル処理 [player.h]
// Author : 
//
//=============================================================================
#pragma once
#include "model.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define MAX_PLAYER		(1)					// プレイヤーの数

#define	PLAYER_SIZE		(5.0f)				// 当たり判定の大きさ

#define PLAYER_LIFE		(4)					// プレイヤーのライフ HP


//*****************************************************************************
// 構造体定義
//*****************************************************************************
struct PLAYER
{
	XMFLOAT4X4			mtxWorld;			// ワールドマトリックス
	XMFLOAT3			pos;				// モデルの位置
	XMFLOAT3			rot;				// モデルの向き(回転)
	XMFLOAT3			scl;				// モデルの大きさ(スケール)

	float				spd;				// 移動スピード

	int					hp;					// プレイヤーのライフ HP
	
	BOOL				load;
	DX11_MODEL			model;				// モデル情報


	int					shadowIdx;			// 影のインデックス番号

	BOOL				use;

	float				size;

	// 階層アニメーション用のメンバー変数
	float				time;				// 線形補間用
	int					tblNo;				// 行動データのテーブル番号
	int					tblMax;				// そのテーブルのデータ数


	//階層アニメーション用の動く状態
	int					state;
	BOOL				moving_f;
	BOOL				attack;

	// 親は、NULL、子供は親のアドレスを入れる
	PLAYER				*parent;			// 自分が親ならNULL、自分が子供なら親のplayerアドレス

	// クォータニオン
	XMFLOAT4			Quaternion;

	XMFLOAT3			UpVector;			// 自分が立っている所

};

enum
{
	STATE_WAIT,

	STATE_MOVE_FORWARD,
	// STATE_MOVE_BACK,
	STATE_MOVE_RIGHT,
	STATE_MOVE_LEFT,

	STATE_ATTACK,

};


//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************
HRESULT InitPlayer(void);
void UninitPlayer(void);
void UpdatePlayer(void);
void DrawPlayer(void);

PLAYER *GetPlayer(void);

// 階層アニメーション用
void SetWaitTbl(void);
void SetMoveTbl(void);
void SetMove_RTbl(void);
void SetMove_LTbl(void);
void SetAttackTbl(void);
